version: '3.8'

services:
  # Frontend - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - docker.env
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - autoreel-network

  # Backend - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - docker.env
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - autoreel-network

  # Celery Worker para monitoramento
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    env_file:
      - docker.env
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - autoreel-network

  # Celery Beat para tarefas agendadas
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app beat --loglevel=info
    env_file:
      - docker.env
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - autoreel-network

  # Redis para Celery broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autoreel-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=autoreel_db
      - POSTGRES_USER=autoreel
      - POSTGRES_PASSWORD=autoreel123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - autoreel-network

volumes:
  postgres_data:
  redis_data:

networks:
  autoreel-network:
    driver: bridge
